


    /*--------------------冒泡排序------------------------*/
    public int[] BubbleSort(int[] sortArray){

        int mid=0;
        for (int i=sortArray.length;i>0;i--){
            for (int j=0;j<i-1;j++) {
                if (sortArray[j]>sortArray[j+1]){
                    mid=sortArray[j+1];
                    sortArray[j+1]=sortArray[j];
                    sortArray[j]=mid;
                }
            }
        }
        return sortArray;
    }


    /*--------------------选择排序------------------------*/
    public int[] SelectionSort(int[] sortArray){

        int minNumberIndex;
        int minNumber;
        Boolean flage=false;

        for (int i=0;i<sortArray.length-1;i++){
            flage=false;
            minNumberIndex=i;
            minNumber=sortArray[i];
            for (int j=i+1;j<sortArray.length;j++) {
                if (minNumber>sortArray[j]){
                    flage=true;
                    minNumber=sortArray[j];
                    minNumberIndex=j;
                }
            }

        if (flage) {
            sortArray[minNumberIndex] = sortArray[i];
            sortArray[i] = minNumber;
        }
        }
        return sortArray;
    }

    /*--------------------插入排序------------------------*/
    public int[] InsertionSort(int[] sortArray){

        int midNumber=0;
        for (int i=2;i<=sortArray.length;i++){
            for (int j=i-1;j>0;j--) {
                if (sortArray[j]<sortArray[j-1]){
                    midNumber=sortArray[j];
                    sortArray[j]=sortArray[j-1];
                    sortArray[j-1]=midNumber;
                }else {
                    break;
                }
            }
        }
        return sortArray;
    }



    /*--------------------基数排序------------------------*/
    public void RadixSorting(int[] a) {
        //首先确定排序的趟数;
        int max = a[0];
        for (int i = 1; i < a.length; i++) {
            if (a[i] > max) {
                max = a[i];
            }
        }
        int time = 0;
        //判断位数;
        while (max > 0) {
            max /= 10;
            time++;
        }
        //建立10个
        List<ArrayList<Integer>> queue = new ArrayList<ArrayList<Integer>>();
        for (int i = 0; i < 10; i++) {
            ArrayList<Integer> queue1 = new ArrayList<Integer>();
            queue.add(queue1);
        }
        //进行time次分配和收集;
        for (int i = 0; i < time; i++) {
            //分配数组元素;
            for (int j = 0; j < a.length; j++) {
                //得到数字的第time+1位数;
                int x = a[j] % (int) Math.pow(10, i + 1) / (int) Math.pow(10, i);
                ArrayList<Integer> queue2 = queue.get(x);
                queue2.add(a[j]);
                queue.set(x, queue2);
            }
            int count = 0;//元素计数器;
            //收集队列元素;
            for (int k = 0; k < 10; k++) {
                while (queue.get(k).size() > 0) {
                    ArrayList<Integer> queue3 = queue.get(k);
                    a[count] = queue3.get(0);
                    queue3.remove(0);
                    count++;
                }
            }
        }
    }

    /*--------------------快速排序------------------------*/
    public void quickSort(int[] a,int start,int end){
        if(start<end){
            int baseNum=a[start];//选基准值
            int midNum;//记录中间值
            int i=start;
            int j=end;
            do{
                while((a[i]<baseNum)&&i<end){
                    i++;
                }
                while((a[j]>baseNum)&&j>start){
                    j--;
                }
                if(i<=j){
                    midNum=a[i];
                    a[i]=a[j];
                    a[j]=midNum;
                    i++;
                    j--;
                }
                System.out.println("i--"+i+"&&&&&&&&&&&&j--"+j+Arrays.toString((a)));
            }while(i<=j);
            if(start<j){
                quickSort(a,start,j);
            }
            if(end>i){
                quickSort(a,i,end);
            }
        }
    }

    /*--------------------桶排序------------------------*/
    public  void heapSort(int[] a){
        int len=a.length;
        //循环建堆
        for(int i=0;i<len-1;i++){
            //建堆
            buildMaxHeap(a,len-1-i);
            //交换堆顶和最后一个元素
            swap(a,0,len-1-i);
        }
    }
    //交换方法
    private  void swap(int[] data, int i, int j) {
        int tmp=data[i];
        data[i]=data[j];
        data[j]=tmp;
    }
    //对data数组从0到lastIndex建大顶堆
    private void buildMaxHeap(int[] data, int lastIndex) {
        //从lastIndex处节点（最后一个节点）的父节点开始
        for(int i=(lastIndex-1)/2;i>=0;i--){
            //k保存正在判断的节点
            int k=i;
            //如果当前k节点的子节点存在
            while(k*2+1<=lastIndex){
                //k节点的左子节点的索引
                int biggerIndex=2*k+1;
                //如果biggerIndex小于lastIndex，即biggerIndex+1代表的k节点的右子节点存在
                if(biggerIndex<lastIndex){
                    //若果右子节点的值较大
                    if(data[biggerIndex]<data[biggerIndex+1]){
                        //biggerIndex总是记录较大子节点的索引
                        biggerIndex++;
                    }
                }
                //如果k节点的值小于其较大的子节点的值
                if(data[k]<data[biggerIndex]){
                    //交换他们
                    swap(data,k,biggerIndex);
                    //将biggerIndex赋予k，开始while循环的下一次循环，重新保证k节点的值大于其左右子节点的值
                    k=biggerIndex;
                }else{
                    break;
                }
            }
        }
    }
